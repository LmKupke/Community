type User @model(mutations: null, queries: null) {
    id: ID!
    firstName: String
    lastName: String
    userName: String!
    userEmail: String!
    userPhone: String
    dog: [Dog!] @connection(name: "userDogs")
}


input userInput {
    id: ID!
    firstName: String
    lastName: String
    userName: String!
    userEmail: String!
    userPhone: String
}


type Mutation {
  createNewUser(input: userInput!) : User @function(name: "userfunction-${env}")
  updateCurrentUser(input: userInput!) : User @function(name: "userfunction-${env}")
  createNewDog(input: dogInput!) : Dog @function(name: "dogfunction-${env}")
  updateCurrentDog(input: dogInput!) : Dog @function(name: "dogfunction-${env}")
}

type Query {
  getCurrentUser(id: ID!): User @function(name: "userfunction-${env}")
  getCurrentDog(id: ID!): [Dog] @function(name: "dogfunction-${env}")
}


type Dog @model(mutations: null, queries: null) {
    id: ID!
    firstName: String!
    lastName: String
    breed: String!
    dob: AWSDate!
    sex: Sex!
    bio: String!
    owner: User! @connection(name: "userDogs")
    picture: String
}

input dogInput {
    id: ID!
    firstName: String!
    lastName: String
    breed: String!
    dob: AWSDate!
    sex: Sex!
    bio: String!
    owner: userInput!
    picture: String
}

enum Sex {
  MALE
  FEMALE
}


type Recreation
  @model
  @auth(rules: [{allow: groups, groups: ["Admin"]}])
  {
    type: RecreationType!
    availableTimeSlot: [AWSDate!]
    reservedTimeSlot: [AWSDate!]
  }

  enum RecreationType {
    BASKETBALL
    Tennis
  }
