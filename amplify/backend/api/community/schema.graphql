type User @model(mutations: null, queries: null) {
  id: ID!
  firstName: String
  lastName: String
  userName: String!
  userEmail: String!
  userPhone: String
  dog: [Dog!] @connection(name: "userDogs")
}

input userInput {
  id: ID!
  firstName: String
  lastName: String
  userName: String!
  userEmail: String!
  userPhone: String
}

type Mutation {
  createUser(input: userInput!): User @function(name: "userfunction-${env}")
  updateUser(input: userInput!): User @function(name: "userfunction-${env}")
  createDog(input: dogInput!): Dog @function(name: "dogfunction-${env}")
  updateDog(input: dogInput!): Dog @function(name: "dogfunction-${env}")
  createReservation(input: ReservationInput!): Reservations @function(name: "reservationfunction-${env}")
  deleteReservation(id: ID!): Reservations @function(name: "reservationfunction-${env}")
}

type Query {
  getUser(id: ID!): User @function(name: "userfunction-${env}")
  getDogs(id: ID!): [Dog] @function(name: "dogfunction-${env}")
  getReservation(id: ID!): [Reservations] @function(name: "reservationfunction-${env}")
  checkReservation(date: AWSDate!): [Reservations] @function(name: "reservationfunction-${env}")
}

type Dog @model(mutations: null, queries: null) {
  id: ID!
  ownerID: ID!
  dogName: String!
  breed: String!
  age: String
  sex: Sex
  owner: User @connection(name: "userDogs")
  picture: String
}

input dogInput {
  id: ID!
  ownerID: ID!
  dogName: String!
  breed: String!
  age: String
  sex: Sex
  picture: String
}

enum Sex {
  MALE
  FEMALE
}

type Reservations @model(mutations: null, queries: null) {
  id: ID!
  userID: ID!
  date: AWSDate!
  time: ReserveTime!
  type: RecreationType!
}

enum RecreationType {
  BASKETBALL
  TENNIS
}

type ReserveTime @model {
  startTime: AWSTime!
  endTime: AWSTime!
}

input ReservationInput {
  id: ID!
  userID: ID!
  date: AWSDate!
  time: ReserveTimeInput!
  type: RecreationType!
}

input ReserveTimeInput {
  startTime: AWSTime!
  endTime: AWSTime!
}
