type User @model(mutations: null, queries: null) {
    id: ID!
    firstName: String
    lastName: String
    userName: String!
    userEmail: String!
    userPhone: String
    dog: [Dog!] @connection(keyName: "userDogs", fields: ["id"])
}


input userInput {
    id: ID!
    firstName: String
    lastName: String
    userName: String!
    userEmail: String!
    userPhone: String
}


type Mutation {
  createUser(input: userInput!) : User @function(name: "userfunction-${env}")
  updateUser(input: userInput!) : User @function(name: "userfunction-${env}")
  createDog(input: dogInput!) : Dog @function(name: "dogfunction-${env}")
  updateDog(input: dogInput!) : Dog @function(name: "dogfunction-${env}")
}

type Query {
  getUser(id: ID!): User @function(name: "userfunction-${env}")
  getDogs(id: ID!): [Dog] @function(name: "dogfunction-${env}")
}


type Dog @model(mutations: null, queries: null) 
@key(name: "userDogs", fields: ["ownerID", "dogName", "breed", "age", "sex", "picture"]){
    id: ID!
    ownerID: ID!
    dogName: String!
    breed: String!
    age: String
    sex: Sex
    owner: User @connection(fields: ["ownerID"])
    picture: String
}

input dogInput {
    id: ID!
    ownerID: ID!
    dogName: String!
    breed: String!
    age: String
    sex: Sex
    picture: String
}

enum Sex {
  MALE
  FEMALE
}


type Recreation
  @model
  @auth(rules: [{allow: groups, groups: ["Admin"]}])
  {
    type: RecreationType!
    availableTimeSlot: [AWSDate!]
    reservedTimeSlot: [AWSDate!]
  }

  enum RecreationType {
    BASKETBALL
    TENNIS
  }
