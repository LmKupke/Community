type Task 
  @model 
  @auth(rules: [
      {allow: groups, groups: ["Managers"], queries: null, mutations: [create, update, delete]},
      {allow: groups, groups: ["Employees"], queries: [get, list], mutations: null}
    ])
{
  id: ID!
  title: String!
  description: String
  status: String
}
type PrivateNote
  @model
  @auth(rules: [{allow: owner}])
{
  id: ID!
  content: String!
}

type User
  @model(mutations: {create: "addUser", delete: "deleteUser"})
  @auth(rules: [
    {allow: owner},
    {allow: groups, groups: ["Admin"]}
  ]) 
  {
    userId: ID!
    firstName: String
    lastName: String
    userName: String!
    userEmail: String!
    userPhone: String
    hasDog: [Dog!] @connection(name: "userDogs", sortField: )
  }

type Mutation {
  addUser(
    id: String, 
    firstName: String, 
    lastName: String, 
    userName: String, 
    userEmail: String, 
    userPhone: String, 
    hasDog: [Dog!]) : User @function(name: "addUser-${env}")
}

type Query {
  getUsers(limit: Int start: Int): [User] @function(name: "getUsers-${env}")
}

type Dog 
  @model(mutations: {create: "addDog", delete: "deleteDog"})
  @auth(rules: [
    {allow: owner},
    {allow: groups, groups: ["Admin"]}
  ])
  @key(name: "userDogs", sortField: )
  {
    dogId: ID!
    firstName: String!
    lastName: String
    breed: String!
    dob: AWSDATE!
    sex: sex!
    bio: String!
    owner: User! @connection(name: "userDogs", sortField: )
    picture: String
  }

  enum sex {
    MALE
    FEMALE
  }

type Recreation
  @model
  @auth(rules: [{allow: groups, groups: ["Admin"]}])
  {
    recreationType: recreationTypes!
    availableTimeSlot: [AWSDate!]
    reservedTimeSlot: [AWSDate!]
  }

  enum recreationTypes {
    Basketball
    Tennis
  }